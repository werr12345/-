import tensorflow.compat.v1 as tf
tf.disable_eager_execution()
from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets('MNIST.DATA/', one_hot=True)
sess = tf.compat.v1.InteractiveSession()
#tensorflow中的计算都需要放在session中进行，使用InretactiveSession比较方便

def weight_variable(shape):
    initial = tf.truncated_normal(shape, stddev = 0.1)
    # 正态分布，标准差为0.1，默认最大为1，最小为-1，均值为0   
    #模型训练自动会产生合适的值 #初始值不重要
    #初始化的不太重要，计算机会自动选择合适的权值进行卷积操作
    weights = tf.Variable(initial_value = initial)
    #Variable具有持久化的效果
    return weights

def bias_variable(shape):
    initial = tf.constant(0.1, shape = shape)
    bias = tf.Variable(initial_value = initial)
    return bias

def conv2d(in_tensor, kernel, strides = [1, 1, 1, 1], padding= 'SAME'):
    conv_out = tf.nn.conv2d(in_tensor, kernel, strides = strides, padding=padding
                            )
    return conv_out

def max_pool_2x2(in_tensor, ksize = [1, 2, 2, 1], strides=[1, 2 , 2, 1], padding = 'SAME'):
    max_pool = tf.nn.max_pool(in_tensor, ksize=ksize, strides=strides, padding = padding)
    return max_pool

def simple_conv2():
    
    x = tf.placeholder(tf.float32, [None, 784])
    y = tf.placeholder(tf.float32, [None, 10])
    x_image = tf.reshape(x, [-1, 28, 28, 1])#通道为1
    
    w1 = [5, 5, 1, 32]
    b1 = [32]
    w2 = [5, 5, 32, 64]
    b2 = [64]
    wfc1 = [7 * 7 * 64, 1024]
    bfc1 = [1024]
    wfc2 = [1024, 10]
    bfc2 = [10]
    
    w_conv1 = weight_variable(w1)
    b_conv1 = bias_variable(b1)
    h_conv1 = tf.nn.relu(conv2d(x_image, w_conv1) + b_conv1)
    h_pool1 = max_pool_2x2(h_conv1)
    
    w_conv2 = weight_variable(w2)
    b_conv2 = bias_variable(b2)
    h_conv2 = tf.nn.relu(conv2d(h_pool1, w_conv2) + b_conv2)
    h_pool2 = max_pool_2x2(h_conv2)
    
    h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])
    w_fc1 = weight_variable(wfc1)
    b_fc1 = bias_variable(bfc1)
    h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, w_fc1) + b_fc1)
    
    keep_prob = tf.placeholder(tf.float32)
    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)
    
    w_fc2 = weight_variable(wfc2)
    b_fc2 = bias_variable(bfc2)
    y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, w_fc2) + b_fc2)
    
    cross_entropy = tf.reduce_mean(-tf.reduce_sum(y * tf.log(y_conv), reduction_indices = [1]))
    train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)
    
    
    correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y, 1))
    accuarcy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
    tf.global_variables_initializer().run()
    #将所有的图变量初始化
    for i in range(400):
        batch_xs, batch_ys = mnist.train.next_batch(50)
        if i % 100 == 0:
            train_accuracy = accuarcy.eval(feed_dict={x:batch_xs,y:batch_ys,keep_prob:1.0}) 
            print('step %d,  taining accuracy %g' % (i, train_accuracy))
        train_step.run(feed_dict={x:batch_xs,y:batch_ys, keep_prob:0.5})
    print('testing accuary %g' % accuarcy.eval(feed_dict = {x:mnist.test.images, y:mnist.test.labels,keep_prob :1.0}))
    return
if __name__ == '__main__':
    simple_conv2()  
